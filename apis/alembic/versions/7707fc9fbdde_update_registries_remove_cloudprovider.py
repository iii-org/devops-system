"""update registries remove cloudprovider

Revision ID: 7707fc9fbdde
Revises: 1ebcdf2b64ba
Create Date: 2021-05-28 09:41:33.958676

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7707fc9fbdde'
down_revision = '1ebcdf2b64ba'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('registries', sa.Column('access_key', sa.String(), nullable=True))
    op.add_column('registries', sa.Column('access_secret', sa.String(), nullable=True))
    op.add_column('registries', sa.Column('description', sa.String(), nullable=True))
    op.add_column('registries', sa.Column('type', sa.String(), nullable=True))
    op.add_column('registries', sa.Column('url', sa.String(), nullable=True))
    op.drop_constraint('registries_provider_id_fkey', 'registries', type_='foreignkey')
    op.drop_column('registries', 'provider_id')
    op.drop_table('cloud_provider')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('registries', sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_column('registries', 'url')
    op.drop_column('registries', 'type')
    op.drop_column('registries', 'description')
    op.drop_column('registries', 'access_secret')
    op.drop_column('registries', 'access_key')
    op.create_table('cloud_provider',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('provider_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='cloud_provider_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='cloud_provider_pkey')
    )
    op.create_foreign_key('registries_provider_id_fkey', 'registries', 'cloud_provider', ['provider_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###
